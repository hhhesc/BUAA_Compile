//#include<stdio.h>

const int ID = 21371173;
const int constVal_i = 0;
const int constVal_0 = 1;
const int constVal_1 = -2;
const int constVal_2 = +3;
const int constVal_4 = - + - + -2;
const int constVal_5 = (1);
const int constVal_6 = (-2);
const int constVal_7 = ((+3));
const int constVal_8 = (((- + - + - +101)));
const int constVal_9 = + -(+(-(- + - + - +101)));
const int constVal_10 = 1 + 2;
const int constVal_11 = - + - + -2 + - + -20;
const int constVal_12 = (- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2);
const int constVal_13 = constVal_0 * + -(+(-(- + - + - +101)));
const int constArr0[1] = {1};
const int constArr1[2][2] = {{0, 0},
                             {3, 3}};
const int constArr2[2][2] = {{constVal_1, - + - + -2},
                             {((+3)),     (((- + - + - +101)))}};
const int constArr3[2][2] = {{+ -(+(-(- + - + - +101))),              (- + - + -2) +
                                                                      ((- + -20)) / (constVal_10) % (constVal_2)},
                             {constVal_0 * + -(+(-(- + - + - +101))), 90}};
const int constArr4[2][+ - + - +2] = {{+ -(+(-(- + - + - +101))),
                                                                               (- + - + -2) +
                                                                               ((- + -20)) / (constVal_10) %
                                                                               (constVal_2)},
                                      {constVal_0 * + -(+(-(- + - + - +101))), 90}};

const int constVal_link_0 = 111, constVal_link_1 =
        (- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2), constVal_link_3 =
        constVal_0 * + -(+(-(- + - + - +101)));

int globalVal_0 = 1;
int globalVal_2 = +3;
int globalVal_4 = - + - + -2;
int globalVal_i = 0;
int globalVal_5 = (1);
int globalVal_1 = -2;
int globalVal_6 = (-2);
int globalVal_7 = ((+3));
int globalVal_8 = (((- + - + - +101)));
int globalVal_9 = + -(+(-(- + - + - +101)));
int globalVal_10 = 1 + 2;
int globalVal_11 = - + - + -2 + - + -20;
int globalVal_12 = (- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2);
int globalVal_13 = constVal_0 * + -(+(-(- + - + - +101)));
int globalArr1[2][2] = {{0, 0},
                        {3, 3}};
int globalArr2[2][2] = {{constVal_1, - + - + -2},
                        {((+3)),     (((- + - + - +101)))}};
int globalArr3[2][2] = {{+ -(+(-(- + - + - +101))),              (- + - + -2) +
                                                                 ((- + -20)) / (constVal_10) % (constVal_2)},
                        {constVal_0 * + -(+(-(- + - + - +101))), 90}};
int globalArr4[2][+ - + - +2] = {{+ -(+(-(- + - + - +101))),
                                                                          (- + - + -2) +
                                                                          ((- + -20)) / (constVal_10) % (constVal_2)},
                                 {constVal_0 * + -(+(-(- + - + - +101))), 90}};

void printID() {
    printf("%d\n", ID);
}

int helloWorld(int hello) {
    const int constVal_i = 10;
    printf("%d", constVal_i + 10);
    return 0;
}

int helloWorld2(int hello1, int hell2) {
    const int constVal_i = 10;
    printf("%d", constVal_i * 10 + hell2);
    return constVal_i * 10 + hell2;
}

int func(int a) {
    helloWorld(a);
    return helloWorld(a) + helloWorld2(a, a * a);
}

void funcArr(int arr[]) {
    printf("%d", arr[0] + arr[0]);
    return;
}

void funcArr2(int arr[][(2 - 2 + 2 - 2 + 2) * 1 / 1]) {
    printf("%d", arr[0][0] + arr[0][0]);
    return;
}

//int getint() {
//    int k;
//    scanf("%d", &k);
//    return k;
//}


int main() {
    int getInt;
    getInt = getint();
    printID();
    printID();
    int insideVal_0 = 1;
    int insideVal_2 = +3;
    int insideVal_4 = - + - + -2;
    int insideVal_i = 0;
    int insideVal_5 = (1);
    int insideVal_1 = -2;
    int insideVal_6 = (-2);
    int insideVal_7 = ((+3));
    int insideVal_8 = (((- + - + - +101)));
    int insideVal_9 = + -(+(-(- + - + - +101)));
    int insideVal_10 = 1 + 2;
    int insideVal_11 = - + - + -2 + - + -20;
    int insideVal_12 = (- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2);
    int insideVal_13 = constVal_0 * + -(+(-(- + - + - +101)));
    int insideVal_link_0 = 111, insideVal_link_1 =
            (- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2), insideVal_link_3 =
            constVal_0 * + -(+(-(- + - + - +101)));

    int funcVal_0 = func(1);
    int funcVal_2 = func(+3);
    int funcVal_4 = func(- + - + -2);
    int funcVal_i = func(99);
    int funcVal_5 = func((1));
    int funcVal_1 = func(-2);
    int funcVal_6 = func((-2));
    int funcVal_7 = func(((+3)));
    int funcVal_8 = func((((- + - + - +101))));
    int funcVal_9 = func(+ -(+(-(- + - + - +101))));
    int funcVal_10 = func(1 + 2);
    int funcVal_11 = func(- + - + -2 + - + -20);
    int funcVal_12 = func((- + - + -2) + ((- + -20)) / (constVal_10) % (constVal_2));
    int funcVal_13 = func(insideVal_0 * + -(+(-(- + - + - +101))));

    int insideArr0[1] = {1};
    int insideArr1[2][2] = {{0, 0},
                            {3, 3}};
    int insideArr2[2][2] = {{constVal_1, - + - + -2},
                            {((+3)),     (((- + - + - +101)))}};
    int insideArr3[2][2] = {{+ -(+(-(- + - + - +101))),              (- + - + -2) +
                                                                     ((- + -20)) / (constVal_10) % (constVal_2)},
                            {constVal_0 * + -(+(-(- + - + - +101))), 90}};
    int insideArr4[2][+ - + - +2] = {{+ -(+(-(- + - + - +101))),
                                                                              (- + - + -2) +
                                                                              ((- + -20)) / (constVal_10) %
                                                                              (constVal_2)},
                                     {constVal_0 * + -(+(-(- + - + - +101))), 90}};
    funcArr(insideArr0);
    funcArr(insideArr2[0]);
    printID();
    func(1);
    helloWorld(funcVal_0);

    if (0 && func(2)){
        ;
    }
    if (1 || func(3)) {
        ;
    }

    {
        { ;;;
            funcVal_10 = func(insideArr0[0]);
        }
        { ;;;;
        }
        { ;;; };;;;;;;
        int insideVal_0 = 1;
        int insideVal_2 = +3;
        int insideVal_4 = - + - + -2;
        int insideVal_i = 0;
        int insideVal_5 = (1);
        int insideVal_1 = -2;
        int insideVal_6 = (-2);
        int insideVal_7 = ((+3));
        int insideVal_8 = (((- + - + - +101)));
        int insideVal_9 = + -(+(-(- + - + - +101)));
        int insideVal_10 = 1 + 2;
        int funcVal_0 = func(1);
        int funcVal_2 = func(+3);
        int funcVal_4 = func(- + - + -2);
        int funcVal_i = func(99);
        int funcVal_5 = func((1));
        int funcVal_1 = func(-2);
        int funcVal_6 = func((-2));
        int funcVal_7 = func(((+3)));
        int funcVal_8 = func((((- + - + - +101))));
        int funcVal_9 = func(+ -(+(-(- + - + - +101))));
        int funcVal_10 = func(1 + 2);
    }

    const int try = constVal_2;
    const int try2 = constArr0[0];
    const int try3 = constArr2[0][0];
    printID();
    printID();
    printf("end");
    {
        int globalVal;
        int globalVal2[2][2];
        funcArr2(insideArr2);
    }
    globalArr1[0][1] = 10 + 10 - 10 * 10;
    globalArr1[0][1] = globalVal_0;
    globalArr1[0][0] = globalArr1[1][1];
    globalArr1[0][0] = constArr0[0];
    insideArr0[0] = globalArr1[0][0];
    insideVal_0 = insideVal_1 + 10 - 20;
    {
        int flag;
        flag = 1 + 1;
        if (flag) {
            printf("%d", flag);
        } else {
            printf("%d\n", flag * flag);
        }

        if (flag * flag < flag + funcVal_10) {
            printf("%d", flag - flag);
        }
        if (flag + 4 <= flag / funcVal_1) {
            printf("%d", flag - flag);
        }

        if (flag + 909 > globalVal_0 + globalVal_11) {
            printf("%d", flag - flag);
        }

        if (flag - 9090 >= globalVal_0 + globalVal_11) {
            printf("%d", flag - flag);
        }
        if (flag * flag < flag + funcVal_10 == globalVal_0 + globalVal_11 || flag + 4 <= flag / funcVal_1) {
            printf("%d", flag - flag);
        }
        if (flag * flag < flag + funcVal_10 == globalVal_0 + globalVal_11 && flag + 4 <= flag / funcVal_1) {
            printf("%d", flag - flag);
        }
        if (flag * flag < flag + funcVal_10 != globalVal_0 + globalVal_11) {
            printf("%d", flag - flag);
        }
        if (flag * flag < flag + funcVal_10 && globalVal_0 + globalVal_11) {
            printf("%d", flag - flag);
        }
        if (flag * flag < flag + funcVal_10 || globalVal_0 + globalVal_11) {
            printf("%d", flag - flag);
        }
    }

    int i, flag = 2;
    for (i = 0; i < 10; i = i + 5) {
        i = i + 2;
        if (flag * flag < flag + funcVal_10 || globalVal_0 + globalVal_11) {
            printf("%d\n", flag - flag);
            flag = flag - 4;
            continue;
        }
    }
    for (i = 0; i < 10; i = i + 1) {
        i = i + 2;
        if (flag * flag < flag + funcVal_10 || globalVal_0 + globalVal_11) {
            printf("%d\n", flag - flag);
            break;
        }
    }
    for (i = 0; i < 10; i = i + 1) {
        i = i + 2;
    }

    flag = 99;
    for (;;) {
        if (flag) {
            break;
        }
    }
    for (;; flag = flag - 1) {
        if (flag < 0) {
            break;
        }
    }

    flag = 2;
    for (; flag >= 2;) {
        flag = flag - 1;
        if (flag < 0) {
            break;
        }
    }
    for (; flag > 2; flag = flag - 1) {
        if (flag < 0) {
            break;
        }
    }
    for (flag = 2;;) {
        flag = flag - 1;
        if (flag < 0) {
            break;
        }
    }
    for (flag = 2;; flag = flag - 1) {

        if (flag < 0) {
            break;
        }
    }
    for (flag = 2; flag > 0;) {
        flag = flag - 1;
    }

    for (i = 1;; i = i + 1) {
        flag = flag + 1;
        if (flag > 1) {
            break;
        }
    }
    int a = 5;

    for (; a < 8; a=a+1) {
        if (a >= 8 - 8 * 7) {
            printf("%d0909", a);
            continue;
        }
    }

    int array[2];
    printf("hello\n");
    printf("ok%d%d", a, flag);
    if(a == 5){

    }
    if(!a){

    }
    return 0;
}